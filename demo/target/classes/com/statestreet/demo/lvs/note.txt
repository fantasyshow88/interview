//LVS
1.转发功能
2.故障移除
3.恢复添加功能
4.主机关了，备机是否接管它的工作

开启动四台Linux系统
一台负载均衡主机
一台负载均衡备机
两台真实服务器

//关闭防火墙
service iptables stop;
chkconfig iptables off;

//安装keepalive
rpm -ivh keepalived-1.2.7-3.el6.i686.rpm;

//看软件安装在哪个目录
rpm -ql keepalived-1.2.7-3.el6.i686;

/*************************在二台真实服务器网上上添加LO:0接口,并设置虚拟IP在此接口上**************/
1.vi /etc/init.d/realserver

SNS_VIP=192.168.1.98            #定义VIP变量
. /etc/rc.d/init.d/functions	#导脚本库
case "$1" in					#case语句 $1传递给该shell脚本的第一个参数
start)
ifconfig lo:0 $SNS_VIP netmask 255.255.255.255 broadcast $SNS_VIP #设置Lo：0 VIP  netmask  及广播
/sbin/route add -host $SNS_VIP dev lo:0							  ##route del 增加本地路由
echo "1" >/proc/sys/net/ipv4/conf/lo/arp_ignore
echo "2" >/proc/sys/net/ipv4/conf/lo/arp_announce
echo "1" >/proc/sys/net/ipv4/conf/all/arp_ignore
echo "2" >/proc/sys/net/ipv4/conf/all/arp_announce
sysctl -p >/dev/null 2>&1						# -p <file>   (default /etc/sysctl.conf) 将标准信息输入设备空文件
echo "RealServer Start OK"
;;
stop)
ifconfig lo:0 down
route del $SNS_VIP >/dev/null 2>&1     			#route del 删除本地路由
echo "0" >/proc/sys/net/ipv4/conf/lo/arp_ignore
echo "0" >/proc/sys/net/ipv4/conf/lo/arp_announce
echo "0" >/proc/sys/net/ipv4/conf/all/arp_ignore
echo "0" >/proc/sys/net/ipv4/conf/all/arp_announce
echo "RealServer Stoped"
;;
*)
echo "Usage: $0 {start|stop}"  #$0 是脚本本身的名字
exit 1							#表示进程正常退出
esac							#case结束
exit 0							#表示进程非正常退出


2.service realserver start

/*************keepalived 参数配置*****************/

global_defs {                        ##全局配置部分
	router_id LVS_DEVEL             ##设置lvs的id，在一个网络内应该是唯一的
}
vrrp_instance VI_1 {            ##设置vrrp组，唯一且同一LVS服务器组要相同
	state MASTER             ##备份LVS服务器设置为BACKUP
	interface eth0             # #设置对外服务的接口
	virtual_router_id 51        ##设置虚拟路由标识
	priority 100                   #设置优先级，数值越大，优先级越高，backup设置为99，这样就能实现当master宕机后自动将backup变为master，而当原master恢复正常时，则现在的master再次变为backup。
	advert_int 1            ##设置同步时间间隔
	authentication {         ##设置验证类型和密码，master和buckup一定要设置一样
		auth_type PASS
		auth_pass 1111
	}
	virtual_ipaddress {          ##设置VIP，可以多个，每个占一行
		192.168.18.60
	}
}
virtual_server 192.168.18.60 80 {
	delay_loop 6            ##健康检查时间间隔，单位s
	lb_algo wrr             ##负载均衡调度算法设置为加权轮叫
	lb_kind DR                              ##负载均衡转发规则
	nat_mask 255.255.255.0   ##网络掩码，DR模式要保障真实服务器和lvs在同一网段
	persistence_timeout 50    ##会话保持时间，单位s
	protocol TCP                           ##协议
	real_server 192.168.18.61 80 {      ##真实服务器配置，80表示端口
		weight 3                             ##权重
		TCP_CHECK {                       ##服务器检测方式设置 keepalived的健康检查方式 有：HTTP_GET|SSL_GET|TCP_CHECK|SMTP_CHECK|MISC_CHECK
			connect_timeout 0    ##连接超时时间
			nb_get_retry 3	     ##失败重试次数
			delay_before_retry 3 ##失败重试的间隔时间
			connect_port 80      ##连接的后端端口
		}
	}

	real_server 192.168.18.62 80 {
		weight 3
		TCP_CHECK {
			connect_timeout 10
			nb_get_retry 3
			delay_before_retry 3
			connect_port 80
		}
	}
}

//功能
转发功能：负载均衡主机A 转发到真实机子B 和C。B，C交替访问。
故障转移；停一台真实server，则只转发到剩下的那台工作的server,当停掉的那台server又启动了，就自动恢复到负载转发的列表中
负载均衡主机关了备机是否接管：接管了。

/***************** 负载均衡备机 配置 (state 和 priority 和主机不一样)*************************/
global_defs {                       
	router_id LVS_DEVEL             
}
vrrp_instance VI_1 {            
	state BACKUP             
	interface eth2            
	virtual_router_id 51        
	priority 99                  
	advert_int 1           
	authentication {        
		auth_type PASS
		auth_pass 1111
	}
	virtual_ipaddress {         
		192.168.230.100
	}
}
virtual_server 192.168.230.100 80 {
	delay_loop 6           
	lb_algo wrr            
	lb_kind DR                          
	nat_mask 255.255.255.0   
	persistence_timeout 0    
	protocol TCP                          
	real_server 192.168.230.134 80 {     
		weight 3                             
		TCP_CHECK {                     
			connect_timeout 10   
			nb_get_retry 3
			delay_before_retry 3
			connect_port 80
		}
	}
	real_server 192.168.230.135 80 {
		weight 3
		TCP_CHECK {
			connect_timeout 10
			nb_get_retry 3
			delay_before_retry 3
			connect_port 80
		}
	}
}



//一台APP server 连接多台mysql db
1.可以连接多台mysql
2.可以检查后边mysql状态，并支持主mysql和备mysql切换
3.此项目支持水平拆分，库表散列

mysql proxy


