1.虚拟机是否使用TLAB用 -XX:+/-UseTLAB  参数来指定
分配内存的原子性，并发的时候保证某一时刻一个指针分配一块内存，可为每个线程分配一小块内存(Thread Local Allocation Buffer TLAB),当TLAB上内存用完了分配新的 TLAB时才需要加同步锁
 
2.-Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError
堆内存最大值 -Xmx 和 最小值 -Xms 设置，以及 dump内存转储快照(*.hprof文件)当outOfMemorryError的时候
 
3.-Xss128k
设置虚拟机栈和本地方法栈总大小(HotSpot虚拟机不区分两者栈)

4.-XX:MaxPermSize=2m 最大方法区大小

5.JVM的GC日志的主要参数包括如下几个：
-XX:+PrintGC 输出GC日志
-XX:+PrintGCDetails 输出GC的详细日志
-XX:+PrintGCTimeStamps 输出GC的时间戳（以基准时间的形式）
-XX:+PrintGCDateStamps 输出GC的时间戳（以日期的形式，如 2013-05-04T21:53:59.234+0800）
-XX:+PrintHeapAtGC 在进行GC的前后打印出堆的信息
-Xloggc:../logs/gc.log 日志文件的输出路径

6.-XX:+UseParNewGC 制定新生代收集器垃圾收集器为ParNew 垃圾收集器
ParNew也是使用 -XX:+UseConcMarkSweepGC 后默认的新生代收集器，ps:Concurrent Mark Sweep(CMS) 为老年代收集器

7.内存的分配策略和虚拟机使用的垃圾回收器有关

8-Xmx3550m -Xms3550m -Xmn2g -Xss128k
-Xmx3550m：设置JVM最大可用内存为3550M。
-Xms3550m：设置JVM促使内存为3550m。此值可以设置与-Xmx相同，以避免每次垃圾回收完成后JVM重新分配内存。
-Xmn2g：设置年轻代大小为2G。整个JVM内存大小=年轻代大小 + 年老代大小 + 持久代大小。持久代一般固定大小为64m，所以增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3/8。
-Xss128k：设置每个线程的堆栈大小

9. VM args : -verbose:gc -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8
	 堆大小20M,新生代大小10M,Eden与一个survivor区(其实总的有两个survivor区)比值为8
	 由以上信息得知：(Eden)8x+(survivor)1x+(survivor)1x = 10 * 1024,即新生代(包括一个eden和一个survivor)=8x + 1x=1024 * 9 = 9216k;
	 
10. -XX:PretenureSizeThreshold=3145728,令大于该值(3M)的对象直接在老年代分配内存

11. -XX:MaxTenuringThreshold=4;对象在survivor区中每熬过一次Minor GC(新生代GC，老年代GC又叫Full GC)增长一岁，当大于4时则移动该对象到老年代

12. 旧生代空间不足
旧生代空间只有在新生代对象转入及创建为大对象、大数组时才会出现不足的现象，当执行Full GC后空间仍然不足，则抛出如下错误：
java.lang.OutOfMemoryError: Java heap space 
为避免以上两种状况引起的Full GC，调优时应尽量做到让对象在Minor GC阶段被回收、让对象在新生代多存活一段时间及不要创建过大的对象及数组。

13. Permanet Generation空间满
Permanet Generation中存放的为一些class的信息等，当系统中要加载的类、反射的类和调用的方法较多时，Permanet Generation可能会被占满，在未配置为采用CMS GC的情况下会执行Full GC。如果经过Full GC仍然回收不了，那么JVM会抛出如下错误信息：
java.lang.OutOfMemoryError: PermGen space 
为避免Perm Gen占满造成Full GC现象，可采用的方法为增大Perm Gen空间或转为使用CMS GC。

14. CMS GC时出现promotion failed和concurrent mode failure
对于采用CMS进行旧生代GC的程序而言，尤其要注意GC日志中是否有promotion failed和concurrent mode failure两种状况，当这两种状况出现时可能会触发Full GC。
promotion failed是在进行Minor GC时，survivor space放不下、对象只能放入旧生代，而此时旧生代也放不下造成的；concurrent mode failure是在执行CMS GC的过程中同时有对象要放入旧生代，而此时旧生代空间不足造成的。
应对措施为：增大survivor space、旧生代空间或调低触发并发GC的比率，但在JDK 5.0+、6.0+的版本中有可能会由于JDK的bug29导致CMS在remark完毕后很久才触发sweeping动作。对于这种状况，可通过设置-XX: CMSMaxAbortablePrecleanTime=5（单位为ms）来避免。



 