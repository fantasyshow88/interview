1.jvm中没有OOM的区域是 程序计数器

cglib使用 可使方法区类加载变多引起OOm，或者jsp较多的项目

jvm
https://www.cnblogs.com/paddix/p/5309550.html

jdk8中 new 对象会出现OOM吗

session从浏览器到server的整个过程


spring 事务传播机制



jdk8哪些类用到了CAS算法（unsafe）

//csa 算法怎么写，循环的时候自旋？
参考CASSingleton

//集合类的实现源码，比如linkedHashMap数据结构
双向链表维持了他们的顺序

//LinkedHashMap最佳实践：LruCache
http://blog.csdn.net/mynameishuangshuai/article/details/52756462

//单点登录怎么实现
理解原理，就是一个登陆系统记录用户登录状态，当访问子系统的时候会重定向到登陆系统，登陆系统知道用户是否登陆了，如果登陆就重定向回子系统并且带上一个一次性token，
子系统拦截器通过该token 走http or rpc or cache的方式过去到用户信息，如果没有登陆，直接跳转登陆页面。


//singletion的终极写法 用cas 来保证原子性 性能更加高(或者用volatile+双重锁机制也还行)
用AtomicReference实现cas算法，一直循环，在循环体里用cas get值 参靠类 CASSingleton

//java四种引用
强软弱虚  之间区别

//怎么避免内存泄露
如果长生命周期的对象持有短生命周期的引用，就很可能会出现内存泄露

//nio为什么不阻塞，即使有一个线程轮训，那这个线程也不能干别的事情，只能一直轮训（java NIO 是同步非阻塞io）
JAVA NIO是同步非阻塞io。同步和异步说的是消息的通知机制，阻塞非阻塞说的是线程的状态 。下面说说我的理解，client和服务器建立了socket连接：1、同步阻塞io：client在调用read（）方法时，
stream里没有数据可读，线程停止向下执行，直至stream有数据。阻塞：体现在这个线程不能干别的了，只能在这里等着同步：是体现在消息通知机制上的，即stream有没有数据是需要我自己来判断的。
2、同步非阻塞io：调用read方法后，如果stream没有数据，方法就返回，然后这个线程就就干别的去了。非阻塞：体现在，这个线程可以去干别的，不需要一直在这等着同步：
体现在消息通知机制，这个线程仍然要定时的读取stream，判断数据有没有准备好，client采用循环的方式去读取，可以看出CPU大部分被浪费了3、异步非阻塞io：服务端调用read()方法，
若stream中无数据则返回，程序继续向下执行。当stream中有数据时，操作系统会负责把数据拷贝到用户空间，然后通知这个线程，这里的消息通知机制就是异步！而不是像NIO那样，自己起一个线程去
监控stream里面有没有数据！

//公钥私钥（非对称加密）
首先生成一对密钥(公钥私钥，公解私，私解公)。
1.a生成一对公钥私钥， 然后把公钥给b,b拿着这个公钥加密数据后传送给a，a就可以用私钥解密该信息，但是也有问题就是如果在a给b送公钥的
过程中被c截获，然后c自己生成了一对公钥私钥，然后把c的公钥给b，b就会用c的公钥加密数据传给a，在过程中又被c截获了，c就可以用c的
私钥解密a发给b的信息。要解决问题就要知道b得到的公钥到底是不是a发给他的，只有是a发给他的话才接受该公钥。那怎么确定是a发给他的呢？
可用第三方机构（CA机构）担保，出具数字证书(包含公钥)，这个时候b收到的就是CA为a颁发的数字证书，b再确定下该证书到底是不是
CA机构颁发的，如果是的话就直接用该数字证书中的公钥加密数据发给a。可是也有漏洞就是CA机构如果被攻陷的话也就不行了，所以密码学还是要
基于信任机构进行下去，当我们访问银行网站的时候，会要我们下载数字证书（浏览器会验证该数字证书到底是不是CA机构的），就是发给我们公钥。

可是以上还有漏洞就是当b获取到a的数字证书将要加密信息传给a的时候，c也可以截获该数字证书，然后a用该数字证书加密假消息发给a，a当然
可以解密该信息（因为是自己的证书被截获了），用自己的私钥解密c 的假信息。那密码学时怎么解决这个问题呢？就是密码学的签名
b为了让a相信信息是b发给他的，b也产生一对公钥私钥，把该公钥给a，b用新产生的私钥再加密一把（签名，MD5）传给a，如果a能用该公钥解开数据
就说明是b发送给a的（因为此时新的私钥只有b有，所以不会被盗）



//加密协议
https://blog.csdn.net/d_x_program/article/details/75038200


//linkedList LRU算法
refer to LRULinkedHashMap class

//js继承方式
一般由两部分组成：继承一次模板+一次继承原型(利用空函数转接再继承该原型)

//linux NIO 实现原理
https://blog.csdn.net/nieyanshun_me/article/details/52397153


//zookeeper
Zookeeper - 简述ZAB 协议和zookeeper PAXOS
消息传递的一致性算法
https://www.cnblogs.com/peerslee/p/8144625.html
https://www.cnblogs.com/jxhd1/p/6528614.html

//zookeeper临时节点只是在一个session会话中有效，利用该特性可以实现分布式锁（如果创建同样的node，zookeeper会报异常）

//利用watch机制可以实现当某个节点变化的时候更新某些watch该节点的client端，比如实现redis集群地址的批量修改，可以在zk上设置一个 redisAddress的key，val设置为对应的值，当val改变时就可以通知到client。

//原生api watch一次性的，需要重复注册watch，不太方便： 原生-->zkClient-->Curator



